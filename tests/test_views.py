import pytest

from yacut.models import URLMap

py_url = 'https://www.python.org'


def test_index_form_get(client):
    got = client.get('/')
    assert got.status_code == 200, (
        'A GET request to the main page should return the status `200`.'
    )
    assert b'form' in got.data, (
        'Add the form to the context of the `index` page'
    )


def test_index_form_post(client):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    })
    assert got.status_code == 200, (
        'When submitting the form, the main page should return the status code `200'
    )
    unique_id = URLMap.query.filter_by(original=py_url, short='py').first()
    assert unique_id, (
        'After submitting the form, a new record should be created in the database.'
    )
    assert '<a href="http://localhost/py"' in got.data.decode('utf-8'), (
        'After submitting the form, the main page should display '
        'the created link.'
    )


def test_duplicated_url_in_form(client, short_python_url):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    }, follow_redirects=True)
    assert (
        'The proposed short link option already exists.'
        in got.data.decode('utf-8')
    ), (
        'If the short name for the link received in the request is already occupied, '
        'after submitting the form, the main page should display the text '
        '"The proposed short link option already exists."'
    )


def test_get_unique_short_id(client):
    got = client.post('/', data={
        'original_link': py_url,
    })
    assert got.status_code == 200, (
        'When submitting a form without the specified short link value '
        'the main page should return the status code `200`'
    )
    unique_id = URLMap.query.filter_by(original=py_url).first()
    assert unique_id, (
        'When submitting a form without the specified short link value '
        'a new record must be created in the database.'
    )
    assert (
        f'Your new link is ready: http://localhost:5000/{unique_id.short}'
    ), (
        'After submitting the form without the specified short link value '
        'the created link should be displayed on the main page.'
    )


def test_redirect_url(client, short_python_url):
    got = client.get(f'/{short_python_url.short}')
    assert got.status_code == 302, (
        'When redirecting to a short address, make sure that it is returned '
        'status code `302`'
    )
    assert got.location == short_python_url.original, (
        'When redirecting to a short address, make sure that it is correct '
        'original address'
    )


def test_len_short_id_form(client):
    long_string = (
        'CuriosityisnotasinHarryHoweverfromtimetotimeyoushouldexercisecaution'
    )
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': long_string,
    })
    assert 'Your new link is ready' not in got.data.decode('utf-8'), (
        'If the short link name is longer than 16 characters long was sent through the form '
        '- an error message should be displayed on the page.'
    )


def test_len_short_id_autogenerated_view(client):
    client.post('/', data={
        'original_link': py_url,
    })
    unique_id = URLMap.query.filter_by(original=py_url).first()
    assert len(unique_id.short) == 6, (
        'If the short link is not specified in the form - '
        'a short link with a length of 6 characters should be generated.'
    )


@pytest.mark.parametrize('data', [
    ({'url': py_url, 'custom_id': '.,/!?'}),
    ({'url': py_url, 'custom_id': 'Hodor-Hodor'}),
    ({'url': py_url, 'custom_id': 'h@k$r'}),
    ({'url': py_url, 'custom_id': '$'}),
])
def test_invalid_short_url(data, client):
    client.post('/', data=data)
    unique_id = URLMap.query.filter_by(original=py_url).first()
    assert not unique_id, (
        'The short link must be allowed to use strictly '
        'a specific set of characters.'
    )
